<!DOCTYPE html>
<html lang="kr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 폼 전송_1019_</title>
    <!-- j쿼리 cdn (ajax 용) -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

    <!-- 엑시오스 cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <!-- action은 제출하지 않는다! 폼을 식별하기 위한 name 정도만 잡는다. -->
    <form name="register">
        <input type="name", name="id" placeholder="ID" value="dddjjj" pattern="^[a-z0-9]{5,}$" required title="소문자 숫자 이용하여 5글자 이상"/>
        <input type="password", name="pw" placeholder="password" value="wow"/>
        <input type="text", name="name" placeholder="이름" value="도준이" required />
        
        <!-- 아래 두줄은 일반폼(동기 전송용) -->
        <!-- <input type="submit" /> -->
        <!-- <button type="submit" >제출</button> -->
        <div>
        <button type="button" onclick='ajaxGet()'>ajax get 전송</button>
        <button type="button" onclick='ajaxPost()'>ajax post 전송</button>
        <button type="button" onclick='axiosGet()'>axios get 전송</button>
        <button type="button" onclick='axiosPost()'>axios post 전송</button>
        <button type="button" onclick='fetchGet()'>fetch get 전송</button>
        <button type="button" onclick='fetchPost()'>fetch post 전송</button>
        </div>
    </form>
    <h3 id="result"></h3> 
    <!-- 알림이 들어갈 곳 -->
    
    <script>

    function getData() {
        const form = document.forms["register"];

        if (!form.checkValidity()) { // checkValidity 폼의 유효성 검사를 해서 boolean 값 반환
          form.reportValidity(); // reportValidity: 유효성 검사를 통과하지 못 한 input에 대해 report
          return false;
        }

        // getData라는 함수의 반환값은 총 2가지 형태
        // false | object (객체 형태)

        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value,
        }

        return data
      }

        // 이상 있음 function getData(){
        //     const form = document.forms["register"];

        //     if(!form.checkVaildity()) {
        //         //checkVaildity(): 폼의 유효성 검사해서 불린값 반환
        //         form.reportValidity();
        //          //reportValidity(): 유효성 검사 통과하지 못한 인풋의 대해 리포트 보고서 안내 값 반환
        //          return false;
        //     }

        //     //getData라는 함수 반환값은 총 2가지 형태
        //     // 하나는 false 
        //     // 두번째 object (객체형) 반환

        //     const data = {
        //         id : form.id.value,
        //         pw : form.pw.value,
        //         name : form.name.value,
        //     }

        //     return data
        // }

        function ajaxGet(){
            const form = document.forms["register"];
            // = 을 빠트리지 말자!!
            console.dir(form);
            console.log(form.id);
            console.log(form.id.value); 
            // 밸류 = 입력한 값을 받을 수 있다.

            const data = {
                id : form.id.value,
                pw : form.pw.value,
                name : form.name.value,
            }

            $.ajax({
                type: "GET", //폼 속성 중 method
                url: "/ajax",
                //url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`, //폼 속성 중 action



                // , 을 빠트리지 말자!!

                // 세 비동기 전송 방식이 다 다르다! 아작스 같은 경우는 객체로 보냄됨.
                data :  data,
                success: function(result) {
                    //매개변수에 응답이 리턴=돌아옴
                    //응답수령 성공시의 핸들러
                    console.dir(result);
                    $("#result").html(`ajax get 요청 성공! ${result.name}님 환영합니다.`)

                }
            })

        }

        function ajaxPost(){
            const form = document.forms["register"];
            console.dir(form);
            console.log(form.id);
            console.log(form.id.value); 
            // 밸류 = 입력한 값을 받을 수 있다.

            const data = getData();
            

            $.ajax({
                type: "POST", //폼 속성 중 method
                url: "/ajax", //폼 속성 중 action
                // 세 비동기 전송 방식이 다 다르다! 아작스 같은 경우는 객체로 보냄됨.
                data :  data,
                success: function(result) {
                    //매개변수에 응답이 리턴=돌아옴
                    //응답수령 성공시의 핸들러
                    console.dir(result);
                    $("#result").html(`ajax post 요청 성공! ${result.name}님 환영합니다.`)

                }
            })




        }
        
        function axiosGet() {
        const data = getData();
        if (!data) return;

        // axios 함수는 promise 객체를 return
        axios({
          method: "GET",
          url: "/axios",
          params: data // get 요청으로 데이터 보낼 때 params 사용
          // params 대신 url에 query를 직접 작성해도 됨
        }).then((res) => {
          // 서버에서 보내준 응답이 res에 담김
          console.log("res", res)
          console.log("res.data", res.data)
          const {
            name
          } = res.data

          $("#result").html(`axios get 요청 성공 ${name}님 환영합니다.`)
        })
      }

        // 이상있음 function axiosGet(){
        //     const data = getData()

        //     // 엑시오스는 프로미스 기반이라 프로미스 객체를 리턴한다 = than or 어싱크 어웨잇 을 할 수 있다.
        //     axios({
        //         method: "GET",
        //         url: "/axios",
        //         // 여기에 데이터를 담는다
        //         params: data
        //     }).then((res)=>{
        //         //서버에서 보낸 응답이 res에 담김
        //         console.log("res". res) 
        //         console.log("res.data", res.data) 
        //         const {
        //             name
        //         } =res.data

        //         $("#result").html(`axios get 요청 성공! ${result.data.name}님 환영합니다.`)
        //     })
            
        // }

        // 어싱크로 받기 + 포스트

        async function axiosPost(){
            // 동적 폼 전송
            // 폼 유효성 검사도 하고 싶음
            // 폼 유효성 검사는 input 태그의 pattern, minlength, required 등의 속성을 이용해 진행하고자 함.
             // ㄴ 그러나 이런 건 form submit이 일어날 때만 작동.
             // 따라서 동적 폼 전송은 form의 submit 대신 버튼에 함수를 걸어서 진행하는 것.

             // 방법1)
             // const regex = /^[a-z0-9]{, 5}$/, 
             // regex.test(form.id.value)

             // 방법2)
             // form.checkVaildity()와 form.reportVaildity() 이용해서 유효성 검증


            const data = getData();
            // data에 받아오는 값은 두가지 형태중 하나
            // 하나는 false 
            // 두번째 object (객체형) 반환

            if (!data) return;
            // 데이터가 잘못되면 해당 함수 종료

            const res = await axios ({
                method: "POST",
                url: "/axios",
                data: data,
            })

            console.log("res", res)
            console.log("res.data", res.data)
            $("#result").html(`axios post 요청 성공! ${res.data.name}님 환영합니다.`)

            // axios({
            //     method: "POST",
            //     url: "/axios",

            //     // 포스트에선 data에 담는다.
            //     data: data,
            // }).then((res)=>{
            //     console.log(res.data)
            //     const{
            //         name
            //     } = res.data
            //     $("#result").html(`axios get 요청 성공! ${name}님 환영합니다.`)
            // })
        }

        async function fetchGet() {
            // 자바스크립트 내장 라이브러리므로 별도의 임포트 필요없다
            const data = getData();
            if(!data) return;

            // 데이터 검사

            //fetch(url, option 객체)
            // url -> action
            // 옵션 객체에 메소드 있음
            // fetch는 메소드 기본값 get
            // fetch는 무조건 쿼리주소로 만들어서 url과 함께 보내야함;;

            // const urlQuery = `id=${data.id}&name=${data.name}&pw=${data.pw}`
            const urlQuery = new URLSearchParams(data).toString();  //클래스라 뉴 써야함. 여기서 투스트링이 쿼리 형태로 만들어준다.
            
        //방법 1:---------------------------------
            // fetch(`/fetch?${urlQuery}`)
            // .then((res) => {
            //     console.log("원본", res) 
                // undefined (문제발생
            //     return res.json() 

        //방법 2:---------------------------------
    //    console.log(data)
    //         }).then((res) => {
    //             console.log(data) 
    //             // 위 함수의 res는 서버에서 응답한 객체가 나올거임.

    //             console.log("파싱", res)
    //             // json으로 parsing 해야함
    //             // 근데 이 promise 기반이라 동작하는데 시간이 걸림.
            
    //             // console.log("원본", res);
    //             // console.log("파싱", res.json());
    //             // 응답을 파싱해야함. 
    //             // .json(), .text(), 등등의 방법이 있다.
    //             // json promise 기반
    // })
            //방법 3: 어싱크 어웨잇---------------------------------
             const oriRes = await fetch(`/fetch?${urlQuery}`)
             const res = await oriRes.json()
             console.log(res)
             $("#result").html(`fetch get 요청 성공! ${res.name}님 환영합니다.`)
        }

        function fetchPost() {
            const data = getData() 
            if (!data) return;

            // 원래는 기본값을 사용 : application/x-www-form-urlencoded
            // 그러나, fetch post 요청 시 'Content-Type': 'application/json' 으로 변경이 필요하다! 안하면 동작을 안한다.
            fetch("/fetch", {
                method: "POST", 
                headers : {
                    "Content-Type" : "application/json" //특수기호, 하이픈이 있어서 문자열로 보낸다.
                },
                body: JSON.stringify(data)
                //stringify: 특정 개체(data)를 json으로 바꾸고 싶을때 사용
            }).then((res)=>{
                return res.json()
            }).then((res)=>{
                console.log(res)
                $("#result").html(`fetch post 요청 성공! ${res.name}님 환영합니다.`)
            })
            }

            //오늘 배운건 비동기 - 페이지를 이동하지 않고 통신을 하는 방법을 배운거임!


    </script>
</body>
</html>